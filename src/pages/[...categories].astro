---
import Layout from "@/layouts/Layout.astro";
import { fetchStories } from "@/lib/api";
import { categories, type Stories } from "@/lib/model";
import Pagination from "@/components/Pagination";
import StoryGrid from "@/components/StoryGrid";
import Story from "@/components/Story";
import Notification from "@/components/Notification";
import StoryPoints from "@/components/StoryPoints";

const isCategory = (c: string): c is keyof typeof categories => Object.keys(categories).includes(c);

const categoryParam = Astro.params.categories;
const category = categoryParam && isCategory(categoryParam) ? categories[categoryParam] : categories.top;

const pageParam = Astro.url.searchParams.get("page");
const page = !pageParam || isNaN(+pageParam) ? 1 : parseInt(pageParam);

let error = false;
let stories: Stories = [];
try {
  stories = await fetchStories(category, page);
} catch (e) {
  error = true;
}
---

<Layout>
  <hgroup>
    <h1>Stories</h1>
    <p>Read free, high quality news from Hacker News.</p>
  </hgroup>

  <section>
    {
      error ? (
        <Notification>Failed to fetch stories</Notification>
      ) : (
        <>
          <StoryGrid>
            {stories.map((story) => (
              <Story key={story.id} story={story} role="listitem">
                <StoryPoints slot="storyPoints" points={story.score} client:visible />
              </Story>
            ))}
          </StoryGrid>
          <Pagination page={page} category={category} />
        </>
      )
    }
  </section>
</Layout>
